{"version":3,"file":"static/js/254.1f5671ae.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactsList/ContactsList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"card\":\"ContactForm_card__voIj4\",\"label\":\"ContactForm_label__-cVXI\",\"inputFirst\":\"ContactForm_inputFirst__3+UL-\",\"inputSecond\":\"ContactForm_inputSecond__6NfXl\",\"btnCont\":\"ContactForm_btnCont__QX0YQ\"};","import { useState } from 'react';\nimport s from './ContactForm.module.css';\nimport { addContact } from '../../redux/contacts/contactsOperation';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport Notiflix from 'notiflix';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify([...contacts]));\n  }, [contacts]);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      default:\n        break;\n    }\n    switch (name) {\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    )\n      return Notiflix.Notify.failure(`${name} is already in contacts.`);\n\n    dispatch(addContact({ name: name, number: number }));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.card} onSubmit={handleSubmitForm}>\n      <label className={s.label}>\n        Name\n        <input\n          className={s.inputFirst}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          className={s.inputSecond}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n      <button className={s.btnCont} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactsList_list__mmE3Y\",\"item\":\"ContactsList_item__6gc1x\"};","import s from './ContactsList.module.css';\nimport { removeContact } from '../../redux/contacts/contactsOperation';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport default function ContactsList() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.contacts.filter);\n\n  const getFilteredContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase().trim()),\n    );\n  };\n\n  const filteredContacts = getFilteredContacts();\n\n  return (\n    <ul className={s.list}>\n      {filteredContacts.map(contact => (\n        <li className={s.item} key={contact.id}>\n          <p className={s.name}>\n            {contact.name}: {contact.number}\n          </p>\n          <button\n            type=\"button\"\n            onClick={() => dispatch(removeContact(contact.id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"flabel\":\"Filter_flabel__h0qLe\",\"finput\":\"Filter_finput__yAfyD\"};","import s from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterContact } from '../../redux/contacts/contactsActions';\n\nexport default function Filter() {\n  const filter = useSelector(state => state.contacts.filter);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { value } = e.target;\n\n    dispatch(filterContact(value));\n  };\n\n  return (\n    <label className={s.flabel}>\n      <h2> Find contacts by name</h2>\n      <input\n        className={s.finput}\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={filter}\n        onChange={handleChange}\n      />\n    </label>\n  );\n}\n","import ContactForm from '../components/ContactForm/ContactForm';\nimport ContactsList from '../components/ContactsList/ContactsList';\nimport Filter from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/contacts/contactsOperation';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm />\n      <Filter />\n      <ContactsList />\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["useState","name","setName","number","setNumber","dispatch","useDispatch","contacts","useSelector","state","items","useEffect","window","localStorage","setItem","JSON","stringify","handleChange","e","target","value","reset","className","s","onSubmit","preventDefault","find","contact","toLowerCase","Notiflix","addContact","type","pattern","title","required","onChange","ContactsList","filter","filteredContacts","includes","trim","map","onClick","removeContact","id","Filter","filterContact","getContacts"],"sourceRoot":""}